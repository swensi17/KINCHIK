const API_KEY = 'f07fe1ef73590e66585c2260c45f60b';
const BASE_URL = 'https://api.themoviedb.org/3';
const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p';
const ITEMS_PER_SECTION = 18;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è fetch –∑–∞–ø—Ä–æ—Å–æ–≤
const fetchOptions = {
    method: 'GET',
    headers: {
        'accept': 'application/json',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMDdmZTFlZjczNTkwZTY2NTg1OGMyMjYwYzQ1ZjYwYiIsIm5iZiI6MTczMjEyNDAxNy41ODYsInN1YiI6IjY3M2UxZDcxMDRjNmIyMGM3NDZmMDY4MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.c7leSyPfcpenR82ViQ29ETTA3fmNo5xaOrplBaaSuAE'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateStr) {
    if (!dateStr) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatRuntime(minutes) {
    if (!minutes) return '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}—á ${mins}–º–∏–Ω`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ URL
async function fetchData(url) {
    try {
        const response = await fetch(url, fetchOptions);
        const data = await response.json();
        return data.results.slice(0, ITEMS_PER_SECTION);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function loadTrendingNow() {
    const data = await fetchData(`${BASE_URL}/trending/movie/day?language=ru`);
    displayMovies(data, 'trendingNowContainer');
}

async function loadPopularMovies() {
    const data = await fetchData(`${BASE_URL}/movie/popular?language=ru`);
    displayMovies(data, 'popularMoviesContainer');
}

async function loadNowPlaying() {
    const data = await fetchData(`${BASE_URL}/movie/now_playing?language=ru`);
    displayMovies(data, 'nowPlayingContainer');
}

async function loadTopTVShows() {
    const data = await fetchData(`${BASE_URL}/tv/top_rated?language=ru`);
    displayMovies(data, 'topTVShowsContainer');
}

async function loadAnimatedMovies() {
    const data = await fetchData(`${BASE_URL}/discover/movie?language=ru&with_genres=16`);
    displayMovies(data, 'animatedMoviesContainer');
}

async function loadNewAnime() {
    const data = await fetchData(`${BASE_URL}/discover/movie?language=ru&with_genres=16&with_keywords=210024`);
    displayMovies(data, 'animeContainer');
}

async function loadTop2024() {
    try {
        const response = await fetch(
            `${BASE_URL}/discover/movie?language=ru&primary_release_year=2024&sort_by=vote_average.desc&vote_count.gte=100&vote_average.gte=7`,
            fetchOptions
        );
        const data = await response.json();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const filteredMovies = data.results
            .filter(movie => movie.vote_count >= 100 && movie.vote_average >= 7)
            .sort((a, b) => b.vote_average - a.vote_average)
            .slice(0, ITEMS_PER_SECTION);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        const moviesWithHighlight = filteredMovies.map(movie => ({
            ...movie,
            isHighRated: movie.vote_average >= 8
        }));

        displayMovies(moviesWithHighlight, 'top2024Container');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ 2024:', error);
        showError('top2024Container', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ 2024');
    }
}

async function loadTop2025() {
    const data = await fetchData(`${BASE_URL}/discover/movie?language=ru&primary_release_year=2025&sort_by=popularity.desc`);
    displayMovies(data, 'top2025Container');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
function showError(containerId, message) {
    const container = document.getElementById(containerId);
    container.innerHTML = `
        <div class="error-message">
            <p>üòï ${message}</p>
            <button onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
function displayMovies(movies, containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';

    if (!movies || movies.length === 0) {
        container.innerHTML = '<p class="no-results">–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    movies.forEach(movie => {
        const movieCard = createMovieCard(movie);
        container.appendChild(movieCard);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
function createMovieCard(movie) {
    const card = document.createElement('div');
    card.className = `movie-card ${movie.isHighRated ? 'high-rated' : ''}`;

    const posterPath = movie.poster_path
        ? `${IMAGE_BASE_URL}/w500${movie.poster_path}`
        : 'https://via.placeholder.com/500x750?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞';

    const ratingClass = movie.vote_average >= 8 ? 'rating-high' : 
                       movie.vote_average >= 7 ? 'rating-good' : '';

    card.innerHTML = `
        <img src="${posterPath}" alt="${movie.title || movie.name}" class="movie-poster" loading="lazy">
        <div class="movie-info">
            <h3 class="movie-title">${movie.title || movie.name}</h3>
            <div class="movie-rating ${ratingClass}">
                ${movie.vote_average.toFixed(1)}
                ${movie.isHighRated ? '<span class="rating-badge">TOP</span>' : ''}
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞
    card.addEventListener('click', () => {
        window.location.href = `/movie/${movie.id}`;
    });

    return card;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞
async function showMovieDetails(movie) {
    try {
        const response = await fetch(
            `${BASE_URL}/movie/${movie.id}?append_to_response=videos,credits&language=ru`,
            fetchOptions
        );
        const movieDetails = await response.json();

        const modal = document.getElementById('movieModal');
        const modalContent = document.getElementById('modalContent');

        const trailer = movieDetails.videos.results.find(video => 
            video.type === 'Trailer' && (video.site === 'YouTube' || video.site === 'Vimeo')
        );

        const trailerEmbed = trailer
            ? `<iframe width="100%" height="400" src="https://www.youtube.com/embed/${trailer.key}" frameborder="0" allowfullscreen></iframe>`
            : '<p class="no-trailer">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';

        const director = movieDetails.credits?.crew?.find(person => person.job === 'Director');
        const cast = movieDetails.credits?.cast?.slice(0, 5).map(actor => actor.name).join(', ');

        modalContent.innerHTML = `
            <h2>${movieDetails.title}</h2>
            <div class="movie-meta">
                <span class="release-date">${formatDate(movieDetails.release_date)}</span>
                <span class="runtime">${formatRuntime(movieDetails.runtime)}</span>
                <span class="rating">‚òÖ ${movieDetails.vote_average.toFixed(1)}</span>
            </div>
            <p class="overview">${movieDetails.overview || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            <div class="trailer-container">
                <h3>–¢—Ä–µ–π–ª–µ—Ä</h3>
                ${trailerEmbed}
            </div>
            <div class="movie-details">
                <p><strong>–ñ–∞–Ω—Ä—ã:</strong> ${movieDetails.genres.map(genre => genre.name).join(', ')}</p>
                ${director ? `<p><strong>–†–µ–∂–∏—Å—Å—ë—Ä:</strong> ${director.name}</p>` : ''}
                ${cast ? `<p><strong>–í –≥–ª–∞–≤–Ω—ã—Ö —Ä–æ–ª—è—Ö:</strong> ${cast}</p>` : ''}
                <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${movieDetails.production_countries.map(country => country.name).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                ${movieDetails.budget > 0 ? `<p><strong>–ë—é–¥–∂–µ—Ç:</strong> $${movieDetails.budget.toLocaleString('ru-RU')}</p>` : ''}
            </div>
        `;

        modal.style.display = 'block';

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = document.getElementsByClassName('close')[0];
        closeBtn.onclick = () => modal.style.display = 'none';
        window.onclick = (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
async function searchMovies(query) {
    try {
        // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        let searchSection = document.querySelector('.search-results');
        if (!searchSection) {
            searchSection = document.createElement('section');
            searchSection.className = 'content-section search-results';
            searchSection.innerHTML = `
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                <div class="movies-grid" id="searchResultsContainer">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤...</p>
                    </div>
                </div>
            `;
            // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–π –≤ main
            const mainContent = document.querySelector('main');
            mainContent.insertBefore(searchSection, mainContent.firstChild);
        }

        const searchContainer = document.getElementById('searchResultsContainer');
        searchContainer.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤...</p>
            </div>
        `;

        const response = await fetch(
            `${BASE_URL}/search/movie?query=${encodeURIComponent(query)}&language=ru`,
            fetchOptions
        );
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        const heading = document.querySelector('.search-results h2');
        heading.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"`;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (data.results && data.results.length > 0) {
            displayMovies(data.results.slice(0, ITEMS_PER_SECTION), 'searchResultsContainer');
        } else {
            searchContainer.innerHTML = '<p class="no-results">–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
        }

        // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
        searchSection.scrollIntoView({ behavior: 'smooth', block: 'start' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤:', error);
        const searchContainer = document.getElementById('searchResultsContainer');
        searchContainer.innerHTML = `
            <div class="error-message">
                <p>üòï –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫</p>
                <button onclick="handleSearch()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
function handleSearch() {
    const searchInput = document.getElementById('searchInput');
    const query = searchInput.value.trim();
    
    if (query) {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        searchInput.blur();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        searchMovies(query);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
document.getElementById('searchButton').addEventListener('click', handleSearch);

document.getElementById('searchInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleSearch();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
document.getElementById('searchInput').addEventListener('focus', function() {
    if (window.innerWidth <= 768) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞
        this.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
document.getElementById('searchInput').addEventListener('blur', function() {
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π, —á—Ç–æ–±—ã —É—Å–ø–µ–ª–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    setTimeout(() => {
        if (window.innerWidth <= 768 && !this.value.trim()) {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    }, 150);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    loadTrendingNow();
    loadPopularMovies();
    loadNowPlaying();
    loadTopTVShows();
    loadAnimatedMovies();
    loadNewAnime();
    loadTop2024();
    loadTop2025();
}); 